// Listing 17.2: Display 555 one-shot pulse length in seconds
//   1) Display time in minutes, seconds, hundreths of seconds
//   2) Pushing KEY[1] sends Trigger to 555 timer chip to start pulse on 555

module X86_UI (KEY, SW, CLOCK_50, LEDR, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, GPIO);
 parameter base = 10; // Display time in decimal
 input  [1:0] KEY;
 input  [9:0] SW;
 input  CLOCK_50;
 output [9:0] LEDR;
 output [7:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5;
 inout [1:0] GPIO;
 wire oneMSec, oneCSec, oneSecond, oneMinute;
 assign GPIO[0] = KEY[1];  // Trigger line (LM555 pin 2)
 assign LEDR[9] = GPIO[1]; // Output line (LM555 pin 3)
 clockDivider toMilliSeconds (CLOCK_50, 50000, oneMSec);
 clockDivider toHundredths (oneMSec, 10, oneCSec);
 twoDigits Hundredths (oneCSec & GPIO[1], ~KEY[1], 99, base, HEX1, HEX0, oneSecond);
 twoDigits Seconds (oneSecond, ~KEY[1], 59, base, HEX3, HEX2, oneMinute);
 twoDigits Minutes (oneMinute, ~KEY[1], 59, base, HEX5, HEX4, LEDR[8]);
endmodule

module twoDigits (clk, init, maxCount, base, tensDig, onesDig, carry);
 input clk;
 input init;
 input [7:0] maxCount;
 input [7:0] base;
 output [7:0] tensDig;
 output [7:0] onesDig;
 output carry;
 reg [7:0] count;
 function [7:0] digit;
  input [3:0] num; 
  case (num)
    0:  digit = 8'b11000000;  // 0
    1:  digit = 8'b11111001;  // 1
    2:  digit = 8'b10100100;  // 2
    3:  digit = 8'b10110000;  // 3
    4:  digit = 8'b10011001;  // 4
    5:  digit = 8'b10010010;  // 5
    6:  digit = 8'b10000010;  // 6
    7:  digit = 8'b11111000;  // 7
    8:  digit = 8'b10000000;  // 8
    9:  digit = 8'b10010000;  // 9
    10: digit = 8'b10001000;  // A
    11: digit = 8'b10000011;  // b
    12: digit = 8'b11000110;  // C
    13: digit = 8'b10100001;  // d
    14: digit = 8'b10000110;  // E
    15: digit = 8'b10001110;  // F
   endcase
  endfunction
 assign onesDig = digit(count%base);
 assign tensDig = digit(count/base);
 assign carry = count==0;
 always @ (posedge(clk))
  begin 
   if (init)
    count <= 0;
   else
    count <= count<maxCount ? count+1 : 0;
  end
endmodule

module clockDivider (inputHz, divisor, outputHz);
 input inputHz;
 input [15:0] divisor;
 output outputHz;
 reg squareWave;
 reg [15:0] countdown;
 assign outputHz = squareWave;
 always @ (posedge(inputHz))
  begin 
   if (countdown == 0)
    countdown <= divisor - 1;
   else
    countdown <= countdown - 1;
   squareWave <= countdown>divisor>>1 ? 1 : 0;
  end
endmodule
